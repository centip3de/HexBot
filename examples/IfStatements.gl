0xC 0 1					0xC2 Compare 1 with 1 0xC2 
0x15 					0xC2 If the comparison results in true, execute the block 0xC2

0xF 0xF0 2				0xC2 Moving 2 into register 0 (setting up the write interrupt) 0xC2
0xF 0xF1 0xC3 stdout 0xC3		0xC2 Moving 'stdout' into register 1 (where to write) 0xC2
0xF 0xF2 0xC3 True! 0xC3 		0xC2 Moving 'True!' into register 2 (what to write) 0xC2
0x13					0xC2 Execute the interrupt 0xC2

0xF 0xF0 2				0xC2 Moving 2 into register 0 (setting up the write interrupt) 0xC2
0xF 0xF1 0xC3 stdout 0xC3		0xC2 Moving 'stdout' into register 1 (where to write) 0xC2
0xF 0xF2 0xC0				0xC2 Moving a new-line symbol into register 2 (what to write) 0xC2
0x13					0xC2 Execute the interrupt 0xC2

0xF 0xF0 1				0xC2 Moving 1 into register 0 (setting up an exit interrupt) 0xC2
0x13					0xC2 Exectue the interrupt 0xC2

0xC1					0xC2 Ending the if-statement-block 0xC2

0xF 0xF0 2				0xC2 Moving 2 into the register 0 (setting up the write interrupt) 0xC2 
0xF 0xF1 0xC3 stdout 0xC3		0xC2 Moving 'stdout' into register 1 (where to write) 0xC2
0xF 0xF2 0xC3 False! 0xC3		0xC2 Moving 'False!' into register 2 (what to write) 0xC2
0x13					0xC2 Execute the interrupt 0xC2

